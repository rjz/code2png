#!/usr/bin/env node

const fs = require('fs');
const {
  basename,
  resolve,
} = require('path');
const { tmpdir } = require('os');
const minimist = require('minimist');

const code2png = require('..');

const DEFAULT_FILENAME = 'code2png.png';
const DEFAULT_THEME = 'okaidia';
const DEFAULT_LANGUAGE = 'javascript';

const argv = minimist(process.argv.slice(2), {
  alias: {
    t: 'theme',
    l: 'language',
    h: 'help',
  },
});

function usage () {
  process.stdout.write(`
Usage: ${basename(process.argv[1])} [filename] [options...]

Options:

    -o             the output file (default = '${DEFAULT_FILENAME}')
    -l, --language any support prism.js language (default = '${DEFAULT_LANGUAGE}')
    -t, --theme    any valid prism.js theme (default = '${DEFAULT_THEME}')
    -h, --help     print this message!

`);
  process.exit(2);
}

if (argv.help) {
  usage();
}

const opts = {
  theme: argv.theme,
  language: argv.language,
};

const fileCount = argv._.length;

const writeOutfile = (name, buf) =>
  fs.writeFileSync(resolve(process.cwd(), name), buf);

if (fileCount > 1) {
  usage();
} else if (fileCount === 1) {
  const codeFile = argv._[0];
  const code = fs.readFileSync(codeFile, 'utf8');
  const outfile = argv.o || `${basename(codeFile)}.png` || DEFAULT_FILENAME;
  code2png(code, opts).then(buf => writeOutfile(outfile, buf));
} else {
  let code = '';
  process.stdin.on('end', () => {
    const outfile = argv.o || DEFAULT_FILENAME;
    code2png(code, opts).then(buf => writeOutfile(outfile, buf));
  });

  process.stdin.on('readable', () => {
    const chunk = process.stdin.read();
    if (chunk !== null) {
      code += chunk;
    } else if (code.length === 0) {
      usage();
    }
  });
}
